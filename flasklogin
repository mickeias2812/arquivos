âœ… 1. CÃ“DIGO PRINCIPAL (app.py)


from flask import Flask, render_template, redirect, url_for, request
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user


app = Flask(__name__)
app.secret_key = 'segredo'  # Protege os cookies e sessÃµes


# 1. Configura o Flask-Login
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'  # Se nÃ£o estiver logado, redireciona para 'login'


# 2. Simula banco de dados (em formato JSON)
usuarios = {
    "usuario1": {
        "id": "usuario1",
        "senha": "1234"
    }
}


# 3. Classe do usuÃ¡rio
class Usuario(UserMixin):
    def __init__(self, id):
        self.id = id


# 4. Como o Flask-Login carrega o usuÃ¡rio logado
@login_manager.user_loader
def load_user(user_id):
    if user_id in usuarios:
        return Usuario(user_id)
    return None


# 5. PÃ¡gina de login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        usuario = request.form['usuario']
        senha = request.form['senha']


        if usuario in usuarios and usuarios[usuario]['senha'] == senha:
            user = Usuario(usuario)
            login_user(user)  # Faz login
            return redirect(url_for('welcome'))
        else:
            return "UsuÃ¡rio ou senha invÃ¡lidos."
    
    return render_template('login.html')


# 6. PÃ¡gina de boas-vindas (rota protegida)
@app.route('/welcome')
@login_required
def welcome():
    return render_template('welcome.html', nome=current_user.id)


# 7. Logout
@app.route('/logout')
@login_required
def logout():
    logout_user()  # Encerra a sessÃ£o
    return redirect(url_for('login'))


if __name__ == '__main__':
    app.run(debug=True)




---


ğŸ§¾ 2. HTML DE LOGIN (templates/login.html)


<!DOCTYPE html>
<html>
<head>
    <title>Login</title>
</head>
<body>
    <h2>Login</h2>
    <form method="post">
        <label>UsuÃ¡rio:</label>
        <input type="text" name="usuario"><br><br>
        <label>Senha:</label>
        <input type="password" name="senha"><br><br>
        <input type="submit" value="Entrar">
    </form>
</body>
</html>




---


ğŸ§¾ 3. HTML DE BOAS-VINDAS (templates/welcome.html)


<!DOCTYPE html>
<html>
<head>
    <title>Bem-vindo</title>
</head>
<body>
    <h2>OlÃ¡, {{ nome }}!</h2>
    <p>VocÃª estÃ¡ logado com sucesso.</p>
    <a href="{{ url_for('logout') }}">Logout</a>
</body>
</html>




---


ğŸ§  EXPLICAÃ‡ÃƒO DE CADA PARTE


ğŸ”¹ app = Flask(__name__)


Cria o aplicativo Flask.




---


ğŸ”¹ app.secret_key = 'segredo'


Chave secreta obrigatÃ³ria para o Flask guardar cookies e sessÃµes de login.




---


ğŸ”¹ LoginManager() e init_app()


O LoginManager controla a sessÃ£o do usuÃ¡rio (login/logout).
Com login_manager.init_app(app), ele Ã© ligado ao app Flask.




---


ğŸ”¹ login_manager.login_view = 'login'


Se alguÃ©m tentar acessar uma pÃ¡gina protegida e nÃ£o estiver logado, o Flask redireciona para essa rota (/login).




---


ğŸ”¹ usuarios = {...}


Simula uma base de usuÃ¡rios com ID e senha. Pode ser trocado por JSON ou banco depois.




---


ğŸ”¹ class Usuario(UserMixin)


Cria a classe do usuÃ¡rio.
O UserMixin fornece as funÃ§Ãµes prontas que o Flask-Login precisa (is_authenticated, get_id()...).




---


ğŸ”¹ @login_manager.user_loader


Quando o usuÃ¡rio jÃ¡ estÃ¡ logado, o Flask-Login precisa carregar ele de volta.
Essa funÃ§Ã£o encontra o usuÃ¡rio a partir do ID salvo na sessÃ£o.




---


ğŸ”¹ /login (GET e POST)


GET: mostra o formulÃ¡rio HTML.


POST: pega os dados do formulÃ¡rio, verifica se estÃ£o certos.


Se estiverem certos: faz login (login_user()) e redireciona para /welcome.


Se estiverem errados: mostra erro.








---


ğŸ”¹ /welcome com @login_required


Essa rota sÃ³ pode ser acessada por usuÃ¡rios logados.
Se tentar acessar direto, Ã© redirecionado para /login.


Mostra o nome do usuÃ¡rio com current_user.id.




---


ğŸ”¹ /logout


Remove o usuÃ¡rio da sessÃ£o com logout_user().


Redireciona de volta para o login.






---


ğŸŸ¨ Como rodar


1. Salve o cÃ³digo app.py




2. Crie a pasta templates/ e coloque os dois arquivos .html dentro dela.


